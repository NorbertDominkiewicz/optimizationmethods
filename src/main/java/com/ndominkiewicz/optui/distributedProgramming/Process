class Process extends Thread {
    int maxX, maxY;
    int totalPoints;
    final PixelWriter pw;
    Random random;
    GraphicsContext gc;
    int currentPoint;
    int pointsInCircle;
    final Object lock = new Object();
    WritableImage img;
    String name;
    Process(String name, int maxX, int maxY, GraphicsContext gc, PixelWriter pw, WritableImage img, int totalPoints) {
        this.name = name;
        this.maxX = maxX;
        this.maxY = maxY;
        this.totalPoints = totalPoints;
        this.gc = gc;
        this.pw = pw;
        this.img = img;
        random = new Random();
    }
    @Override
    public void run() {
        long startTime = System.currentTimeMillis();
        for(currentPoint= 0; currentPoint < totalPoints; currentPoint++) {
            if(currentPoint >= totalPoints) return;
            double x = random.nextDouble() * 2 - 1;
            double y = random.nextDouble() * 2 - 1;
            int px = (int) ((x + 1) * maxX / 2);
            int py = (int) ((y + 1) * maxY / 2);
            if(Math.pow(x, 2) + Math.pow(y, 2) <= 1) {
                synchronized (pw) {
                    pw.setColor(px, py, Color.color(0.9, 0.9, 0.4));
                }
                synchronized (lock) {
                    pointsInCircle++;
                }
            } else {
                synchronized (pw) {
                    pw.setColor(px, py, Color.color(0.6, 0.0, 0.0));
                }
            }
            Platform.runLater(() -> gc.drawImage(img, 0, 0));
        }
    }
    public int getCurrentPoint() {
       return currentPoint;
    }
    public int getPointsInCircle() {
        synchronized (lock) {
            return pointsInCircle;
        }
    }
}